'use strict';

//var qt = require('./node-qt');
//require('./qt-constants'); // optional: used named constants

module.exports = function(qt){
	
/**
 * Shows a confirm dialog.
 *
 * @param {string} txt
 * @returns {boolean}
 */
qt.confirm = function(txt, title){
	if (title==undefined) title='Confirm';
	var msgBox = new qt.QMessageBox;
	msgBox.setIcon(4);
	msgBox.setWindowTitle(title);
	msgBox.setText(txt);
	msgBox.setStandardButtons(qt.STANDARDBUTTON.OK | qt.STANDARDBUTTON.CANCEL);
	msgBox.setDefaultButton(qt.STANDARDBUTTON.OK);
	var ret = msgBox.exec();
	return (ret == qt.STANDARDBUTTON.OK);
}

qt.alert = function(txt, title){
	if (title==undefined) title='Alert';
	return qt.QMessageBox.information(title, txt);
}

/**
 * Prints sorted list of supported methods(for both Qt Classes and instances)
 *
 * @param {object} obj - Qt class (function) or instance
 */
qt.api = function(obj){
	var p = typeof obj=='function'?obj.prototype:Object.getPrototypeOf(obj);
	var keys = Object.keys(p);
	keys.sort();
	console.dir(keys);
}

////////////////////////////////////////////////////////////////////////////////
// Node.js Events API
// http://nodejs.org/docs/v0.8.25/api/events.html
// omitted: setMaxListeners
// omitted: 'newListener' event
// added: prependListener
////////////////////////////////////////////////////////////////////////////////
var classes = [
// Widgets
	'QCalendarWidget',
	'QCheckBox',
	'QComboBox',
	'QDateEdit',
	'QDateTimeEdit',
	'QDial',
	'QDialogButtonBox',
	'QFrame',
	'QLabel',
	'QLineEdit',
	'QListWidget',
	'QMainWindow',
	'QMenu',
	'QMenuBar',
	'QPlainTextEdit',
	'QProgressBar',
	'QPushButton',
	'QRadioButton',
	'QScrollBar',
	'QSlider',
	'QSpinBox',
	'QSplitter',
	'QStatusBar',
	'QTabBar',
	'QTableView',
	'QTableWidget',
	'QTabWidget',
	'QTextBrowser',
	'QTextEdit',
	'QTimeEdit',
	'QToolBar',
	'QToolButton',
	'QTreeView',
	'QTreeWidget',
	'QWidget',
	'QWizardPage',
// Dialog-Widgets
	'QColorDialog',
	'QDialog',
	'QFileDialog',
	'QFontDialog',
	'QInputDialog',
	'QMessageBox',
	'QPageSetupDialog',
	'QPrintDialog',
	'QPrintPreviewDialog',
	'QProgressDialog',
	'QWizard'
];

for (var i in classes){
	var p = qt[classes[i]].prototype;
	
	// ALIASES
	p.addListener = p.on;
	p.removeListener = p.off;
	p.removeAllListeners = p.off;
	
	p.prependListener = function(evt, cb){// NON API
		var l = this.listeners(evt);
		this.off(evt);
		this.on(evt,cb);
		for (var i in l) this.on(evt, l[i]);
	};
	p.once = function(evt, cb){
		var self = this;
		var f = function(e){cb(e);self.off(evt, f);};
		return this.on(evt, f);
	};
	p.emit = function(){
		var args = Array.prototype.slice.call(arguments, 0);
		var evt = args.shift();
		for (var i in this.listeners(evt)) this.listeners(evt)[i].apply(this, args);
	};
	//qt.QMainWindow.prototype.setMaxListeners = function(n){
	//	
	//};

}
////////////////////////////////////////////////////////////////////////////////

}