'use strict';

// ENUMS (http://doc.c.digia.com/qt/qt.html)

//var c = {};
//var c = require('./node-qt');

module.exports = function(c){

/**
	* Qt::AlignmentFlag
	* @readonly
	* @enum {number}
	*/
c.ALIGNMENTFLAG = {
	ALIGNLEFT: 0x0001,
	ALIGNRIGHT: 0x0002,
	ALIGNHCENTER: 0x0004,
	ALIGNJUSTIFY: 0x0008,
	//The vertical flags are:
	ALIGNTOP: 0x0020,
	ALIGNBOTTOM: 0x0040,
	ALIGNVCENTER: 0x0080
}
Object.freeze(c.ALIGNMENTFLAG);

/**
	* Qt::ApplicationAttribute
	* @readonly
	* @enum {number}
	*/
c.APPLICATIONATTRIBUTE = {
	AA_IMMEDIATEWIDGETCREATION: 0, // Ensures that widgets are created as soon as they are constructed. By default, resources for widgets are allocated on demand to improve efficiency and minimize resource usage. Setting or clearing this attribute affects widgets constructed after the change. Setting it tells Qt to create toplevel windows immediately. Therefore, if it is important to minimize resource consumption, do not set this attribute.
	AA_MSWINDOWSUSEDIRECT3DBYDEFAULT: 1, // This value is obsolete and has no effect.
	AA_DONTSHOWICONSINMENUS: 2, // Actions with the Icon property won't be shown in any menus unless specifically set by the QAction::iconVisibleInMenu property. Menus that are currently open or menus already created in the native Mac OS X menubar may not pick up a change in this attribute. Changes in the QAction::iconVisibleInMenu property will always be picked up.
	AA_NATIVEWINDOWS: 3, // Ensures that widgets have native windows.
	AA_DONTCREATENATIVEWIDGETSIBLINGS: 4, // Ensures that siblings of native widgets stay non-native unless specifically set by the Qt::WA_NativeWindow attribute.
	AA_MacPluginApplication: 5, // Stops the Qt mac application from doing specific INITIALIZATIONS that do not necessarily make sense when using Qt to author a plugin. This includes avoiding loading our nib for the main menu and not taking possession of the native menu bar. When setting this attribute to true will also set the AA_DontUseNativeMenuBar attribute to true.
	AA_DONTUSENATIVEMENUBAR: 6, // All menubars created while this attribute is set to true won't be used as a native menubar (e.g, the menubar at the top of the main screen on Mac OS X or at the bottom in Windows CE).
	AA_MACDONTSWAPCTRLANDMETA: 7, // On Mac OS X by default, Qt swaps the Control and Meta (Command) keys (i.e., whenever Control is pressed, Qt sends Meta, and whenever Meta is pressed Control is sent). When this attribute is true, Qt will not do the flip. QKeySequence::StandardShortcuts will also flip accordingly (i.e., QKeySequence::Copy will be Command+C on the keyboard regardless of the value set, though what is output for QKeySequence::toString(QKeySequence::PortableText) will be different).
	AA_S60DONTCONSTRUCTAPPLICATIONPANES: 8, // Stops Qt from initializing the S60 status pane and softkey pane on Symbian. This is useful to save memory and reduce startup time for applications that will run in fullscreen mode during their whole lifetime. This attribute must be set before QApplication is constructed.
	AA_S60DISABLEPARTIALSCREENINPUTMODE: 9 // By default in Symbian^3, a separate editing window is opened on top of an application. This is exactly like editing on previous versions of Symbian behave. When this attribute is false, a non-fullscreen virtual keyboard window is shown on top of application and it is ensured that the focused text input widget is visible. The auto-translation of input widget is only supported for applications based on QGraphicsView, but the non-fullscreen virtual keyboard will work for any kind of application (i.e. QWidgets-based). By default this attribute is true. This attribute must be set after QApplication is constructed. This is only supported in Symbian^3 and later Symbian releases.
}
Object.freeze(c.APPLICATIONATTRIBUTE);

// Qt::ArrowType
// Qt::AspectRatioMode
// Qt::BGMode
// Qt::BrushStyle
// Qt::CaseSensitivity

/**
	* @readonly
	* @enum {number}
	*/
c.CASESENSITIVITY = {
	CASEINSENSITIVE: 0,
	CASESENSITIVE: 1
}
Object.freeze(c.CASESENSITIVITY);

// Qt::CheckState
// Qt::ClipOperation
// Qt::ConnectionType

// Qt::Corner
// Qt::TopLeftCorner 0x00000 The top-left corner of the rectangle.
// Qt::TopRightCorner 0x00001 The top-right corner of the rectangle.
// Qt::BottomLeftCorner 0x00002 The bottom-left corner of the rectangle.
// Qt::BottomRightCorner 0x00003 The bottom-right corner of the rectangle.

/**
	* Qt::CursorShape
	* @readonly
	* @enum {number}
	*/
c.CURSORSHAPE = {
	ARROWCURSOR: 0, // The standard arrow cursor.
	UPARROWCURSOR: 1, // An arrow pointing upwards toward the top of the screen.
	CROSSCURSOR: 2, // A crosshair cursor, typically used to help the user accurately select a point on the screen.
	WAITCURSOR: 3, // An hourglass or watch cursor, usually shown during operations that prevent the user from interacting with the application.
	IBEAMCURSOR: 4, // A caret or ibeam cursor, indicating that a widget can accept and display text input.
	SIZEVERCURSOR: 5, // A cursor used for elements that are used to vertically resize top-level windows.
	SIZEHORCURSOR: 6, // A cursor used for elements that are used to horizontally resize top-level windows.
	SIZEBDIAGCURSOR: 7, // A cursor used for elements that are used to diagonally resize top-level windows at their top-right and bottom-left corners.
	SIZEFDIAGCURSOR: 8, // A cursor used for elements that are used to diagonally resize top-level windows at their top-left and bottom-right corners.
	SIZEALLCURSOR: 9, // A cursor used for elements that are used to resize top-level windows in any direction.
	BLANKCURSOR: 10, // A blank/invisible cursor, typically used when the cursor shape needs to be hidden.
	SPLITVCURSOR: 11, // A cursor used for vertical splitters, indicating that a handle can be dragged horizontally to adjust the use of available space.
	SPLITHCURSOR: 12, // A cursor used for horizontal splitters, indicating that a handle can be dragged vertically to adjust the use of available space.
	POINTINGHANDCURSOR: 13, // A pointing hand cursor that is typically used for clickable elements such as hyperlinks.
	FORBIDDENCURSOR: 14, // A slashed circle cursor, typically used during drag and drop operations to indicate that dragged content cannot be dropped on particular widgets or inside certain regions.
	OPENHANDCURSOR: 17, // A cursor representing an open hand, typically used to indicate that the area under the cursor is the visible part of a canvas that the user can click and drag in order to scroll around.
	CLOSEDHANDCURSOR: 18, // A cursor representing a closed hand, typically used to indicate that a dragging operation is in progress that involves scrolling.
	WHATSTHISCURSOR: 15, // An arrow with a question mark, typically used to indicate the presence of What's This? help for a widget.
	BUSYCURSOR: 16, // An hourglass or watch cursor, usually shown during operations that allow the user to interact with the application while they are performed in the background.
	DRAGMOVECURSOR: 20, // A cursor that is usually used when dragging an item.
	DRAGCOPYCURSOR: 19, // A cursor that is usually used when dragging an item to copy it.
	DRAGLINKCURSOR: 21, // cursor that is usually used when dragging an item to make a link to it.
	BITMAPCURSOR: 24
}
Object.freeze(c.CURSORSHAPE);

/**
	* Qt::DateFormat
	* @readonly
	* @enum {number}
	*/
c.DATEFORMAT = {
	TEXTDATE: 0, // The default Qt format, which includes the day and month name, the day number in the month, and the year in full. The day and month names will be short, localized names. This is basically equivalent to using the date format string, "ddd MMM d yyyy". See QDate::toString() for more information.
	ISODATE: 1 // ISO 8601 extended format: either YYYY-MM-DD for dates or YYYY-MM-DDTHH:MM:SS, YYYY-MM-DDTHH:MM:SSTZD (e.g., 1997-07-16T19:20:30+01:00) for combined dates and times.
}
Object.freeze(c.DATEFORMAT);

// Qt::DayOfWeek
//c.DayOfWeek = {
// Monday: 1,
// Tuesday: 2,
// Wednesday: 3,
// Thursday: 4,
// Friday: 5,
// Saturday: 6,
// Sunday: 7
//}
//Object.freeze(c.DayOfWeek);

//Qt::DockWidgetArea
// Qt::LeftDockWidgetArea 0x1
// Qt::RightDockWidgetArea 0x2
// Qt::TopDockWidgetArea 0x4
// Qt::BottomDockWidgetArea 0x8
// Qt::AllDockWidgetAreas DockWidgetArea_Mask
// Qt::NoDockWidgetArea 0

// Qt::DropAction
// Qt::CopyAction 0x1 Copy the data to the target.
// Qt::MoveAction 0x2 Move the data from the source to the target.
// Qt::LinkAction 0x4 Create a link from the source to the target.
// Qt::ActionMask 0xff
// Qt::IgnoreAction 0x0 Ignore the action (do nothing with the data).
// Qt::TargetMoveAction 0x8002 On Windows, this value is used when the ownership of the D&D data should be taken over by the target application, i.e., the source application should not delete the data.

// Qt::EventPriority
// Qt::HighEventPriority 1 Events with this priority are sent before events with NormalEventPriority or LowEventPriority.
// Qt::NormalEventPriority 0 Events with this priority are sent after events with HighEventPriority, but before events with LowEventPriority.
// Qt::LowEventPriority -1 Events with this priority are sent after events with HighEventPriority or NormalEventPriority.

// Qt::FillRule
// Qt::OddEvenFill 0
// Qt::WindingFill 1

//Qt::FocusPolicy
//Qt::FocusReason
//Qt::GestureFlag
//Qt::GestureState
//Qt::GestureType

/**
	* Qt::GlobalColor
	* @readonly
	* @enum {number}
	*/
c.GLOBALCOLOR = {
	WHITE : 3,
	BLACK : 2,
	RED : 7,
	DARKRED : 13,
	GREEN : 8,
	DARKGREEN : 14,
	BLUE : 9,
	DARKBLUE : 15,
	CYAN : 10,
	DARKCYAN : 16,
	MAGENTA : 11,
	DARKMAGENTA : 17,
	YELLOW : 12,
	DARKYELLOW : 18,
	GRAY : 5,
	DARKGRAY : 4,
	LIGHTGRAY : 6,
	TRANSPARENT : 19,
	COLOR0 : 0,
	COLOR1 : 1
}
Object.freeze(c.GLOBALCOLOR);

// Qt::HitTestAccuracy
// Qt::ExactHit 0
// Qt::FuzzyHit 1

//Qt::ImageConversionFlag
//Qt::InputMethodHint
//Qt::InputMethodQuery
//Qt::ItemDataRole

/**
	* Qt::ItemFlag
	* @readonly
	* @enum {number}
	*/
c.ITEMFLAG = {
	NOITEMFLAGS: 0, // It does not have any properties set.
	ITEMISSELECTABLE: 1, // It can be selected.
	ITEMISEDITABLE: 2, // It can be edited.
	ITEMISDRAGENABLED: 4, // It can be dragged.
	ITEMISDROPENABLED: 8, // It can be used as a drop target.
	ITEMISUSERCHECKABLE:16, // t can be checked or unchecked by the user.
	ITEMISENABLED: 32, // The user can interact with the item.
	ITEMISTRISTATE: 64 // The item is checkable with three separate states.
}
Object.freeze(c.ITEMFLAG);

//Qt::ItemSelectionMode

/**
	* Qt::Key
	* @readonly
	* @enum {number}
	*/
c.KEY = {
	KEY_ESCAPE : 0x01000000, // MISC KEYS
	KEY_TAB : 0x01000001,
	KEY_BACKTAB : 0x01000002,
	KEY_BACKSPACE : 0x01000003,
	KEY_RETURN : 0x01000004,
	KEY_ENTER : 0x01000005,
	KEY_INSERT : 0x01000006,
	KEY_DELETE : 0x01000007,
	KEY_PAUSE : 0x01000008,
	KEY_PRINT : 0x01000009,
	KEY_SYSREQ : 0x0100000A,
	KEY_CLEAR : 0x0100000B,
	KEY_HOME : 0x01000010, // CURSOR MOVEMENT
	KEY_END : 0x01000011,
	KEY_LEFT : 0x01000012,
	KEY_UP : 0x01000013,
	KEY_RIGHT : 0x01000014,
	KEY_DOWN : 0x01000015,
	KEY_PAGEUP : 0x01000016,
	KEY_PAGEDOWN : 0x01000017,
	KEY_SHIFT : 0x01000020, // MODIFIERS
	KEY_CONTROL : 0x01000021,
	KEY_META : 0x01000022,
	KEY_ALT : 0x01000023,
	KEY_CAPSLOCK : 0x01000024,
	KEY_NUMLOCK : 0x01000025,
	KEY_SCROLLLOCK : 0x01000026,
	KEY_F1 : 0x01000030, // FUNCTION KEYS
	KEY_F2 : 0x01000031,
	KEY_F3 : 0x01000032,
	KEY_F4 : 0x01000033,
	KEY_F5 : 0x01000034,
	KEY_F6 : 0x01000035,
	KEY_F7 : 0x01000036,
	KEY_F8 : 0x01000037,
	KEY_F9 : 0x01000038,
	KEY_F10 : 0x01000039,
	KEY_F11 : 0x0100003A,
	KEY_F12 : 0x0100003B,
	KEY_F13 : 0x0100003C,
	KEY_F14 : 0x0100003D,
	KEY_F15 : 0x0100003E,
	KEY_F16 : 0x0100003F,
	KEY_F17 : 0x01000040,
	KEY_F18 : 0x01000041,
	KEY_F19 : 0x01000042,
	KEY_F20 : 0x01000043,
	KEY_F21 : 0x01000044,
	KEY_F22 : 0x01000045,
	KEY_F23 : 0x01000046,
	KEY_F24 : 0x01000047,
	KEY_F25 : 0x01000048, // F25 .. F35 ONLY ON X11
	KEY_F26 : 0x01000049,
	KEY_F27 : 0x0100004A,
	KEY_F28 : 0x0100004B,
	KEY_F29 : 0x0100004C,
	KEY_F30 : 0x0100004D,
	KEY_F31 : 0x0100004E,
	KEY_F32 : 0x0100004F,
	KEY_F33 : 0x01000050,
	KEY_F34 : 0x01000051,
	KEY_F35 : 0x01000052,
	KEY_SUPER_L : 0x01000053, // EXTRA KEYS
	KEY_SUPER_R : 0x01000054,
	KEY_MENU : 0x01000055,
	KEY_HYPER_L : 0x01000056,
	KEY_HYPER_R : 0x01000057,
	KEY_HELP : 0x01000058,
	KEY_DIRECTION_L : 0x01000059,
	KEY_DIRECTION_R : 0x01000060,
	KEY_SPACE : 0x20, // 7 BIT PRINTABLE ASCII
	KEY_ANY : 0x20, // KEY_SPACE
	KEY_EXCLAM : 0x21,
	KEY_QUOTEDBL : 0x22,
	KEY_NUMBERSIGN : 0x23,
	KEY_DOLLAR : 0x24,
	KEY_PERCENT : 0x25,
	KEY_AMPERSAND : 0x26,
	KEY_APOSTROPHE : 0x27,
	KEY_PARENLEFT : 0x28,
	KEY_PARENRIGHT : 0x29,
	KEY_ASTERISK : 0x2A,
	KEY_PLUS : 0x2B,
	KEY_COMMA : 0x2C,
	KEY_MINUS : 0x2D,
	KEY_PERIOD : 0x2E,
	KEY_SLASH : 0x2F,
	KEY_0 : 0x30,
	KEY_1 : 0x31,
	KEY_2 : 0x32,
	KEY_3 : 0x33,
	KEY_4 : 0x34,
	KEY_5 : 0x35,
	KEY_6 : 0x36,
	KEY_7 : 0x37,
	KEY_8 : 0x38,
	KEY_9 : 0x39,
	KEY_COLON : 0x3A,
	KEY_SEMICOLON : 0x3B,
	KEY_LESS : 0x3C,
	KEY_EQUAL : 0x3D,
	KEY_GREATER : 0x3E,
	KEY_QUESTION : 0x3F,
	KEY_AT : 0x40,
	KEY_A : 0x41,
	KEY_B : 0x42,
	KEY_C : 0x43,
	KEY_D : 0x44,
	KEY_E : 0x45,
	KEY_F : 0x46,
	KEY_G : 0x47,
	KEY_H : 0x48,
	KEY_I : 0x49,
	KEY_J : 0x4A,
	KEY_K : 0x4B,
	KEY_L : 0x4C,
	KEY_M : 0x4D,
	KEY_N : 0x4E,
	KEY_O : 0x4F,
	KEY_P : 0x50,
	KEY_Q : 0x51,
	KEY_R : 0x52,
	KEY_S : 0x53,
	KEY_T : 0x54,
	KEY_U : 0x55,
	KEY_V : 0x56,
	KEY_W : 0x57,
	KEY_X : 0x58,
	KEY_Y : 0x59,
	KEY_Z : 0x5A,
	KEY_BRACKETLEFT : 0x5B,
	KEY_BACKSLASH : 0x5C,
	KEY_BRACKETRIGHT : 0x5D,
	KEY_ASCIICIRCUM : 0x5E,
	KEY_UNDERSCORE : 0x5F,
	KEY_QUOTELEFT : 0x60,
	KEY_BRACELEFT : 0x7B,
	KEY_BAR : 0x7C,
	KEY_BRACERIGHT : 0x7D,
	KEY_ASCIITILDE : 0x7E,

	KEY_NOBREAKSPACE : 0x0A0,
	KEY_EXCLAMDOWN : 0x0A1,
	KEY_CENT : 0x0A2,
	KEY_STERLING : 0x0A3,
	KEY_CURRENCY : 0x0A4,
	KEY_YEN : 0x0A5,
	KEY_BROKENBAR : 0x0A6,
	KEY_SECTION : 0x0A7,
	KEY_DIAERESIS : 0x0A8,
	KEY_COPYRIGHT : 0x0A9,
	KEY_ORDFEMININE : 0x0AA,
	KEY_GUILLEMOTLEFT : 0x0AB, // LEFT ANGLE QUOTATION MARK
	KEY_NOTSIGN : 0x0AC,
	KEY_HYPHEN : 0x0AD,
	KEY_REGISTERED : 0x0AE,
	KEY_MACRON : 0x0AF,
	KEY_DEGREE : 0x0B0,
	KEY_PLUSMINUS : 0x0B1,
	KEY_TWOSUPERIOR : 0x0B2,
	KEY_THREESUPERIOR : 0x0B3,
	KEY_ACUTE : 0x0B4,
	KEY_MU : 0x0B5,
	KEY_PARAGRAPH : 0x0B6,
	KEY_PERIODCENTERED : 0x0B7,
	KEY_CEDILLA : 0x0B8,
	KEY_ONESUPERIOR : 0x0B9,
	KEY_MASCULINE : 0x0BA,
	KEY_GUILLEMOTRIGHT : 0x0BB, // RIGHT ANGLE QUOTATION MARK
	KEY_ONEQUARTER : 0x0BC,
	KEY_ONEHALF : 0x0BD,
	KEY_THREEQUARTERS : 0x0BE,
	KEY_QUESTIONDOWN : 0x0BF,
	KEY_AGRAVE : 0x0C0,
	KEY_AACUTE : 0x0C1,
	KEY_ACIRCUMFLEX : 0x0C2,
	KEY_ATILDE : 0x0C3,
	KEY_ADIAERESIS : 0x0C4,
	KEY_ARING : 0x0C5,
	KEY_AE : 0x0C6,
	KEY_CCEDILLA : 0x0C7,
	KEY_EGRAVE : 0x0C8,
	KEY_EACUTE : 0x0C9,
	KEY_ECIRCUMFLEX : 0x0CA,
	KEY_EDIAERESIS : 0x0CB,
	KEY_IGRAVE : 0x0CC,
	KEY_IACUTE : 0x0CD,
	KEY_ICIRCUMFLEX : 0x0CE,
	KEY_IDIAERESIS : 0x0CF,
	KEY_ETH : 0x0D0,
	KEY_NTILDE : 0x0D1,
	KEY_OGRAVE : 0x0D2,
	KEY_OACUTE : 0x0D3,
	KEY_OCIRCUMFLEX : 0x0D4,
	KEY_OTILDE : 0x0D5,
	KEY_ODIAERESIS : 0x0D6,
	KEY_MULTIPLY : 0x0D7,
	KEY_OOBLIQUE : 0x0D8,
	KEY_UGRAVE : 0x0D9,
	KEY_UACUTE : 0x0DA,
	KEY_UCIRCUMFLEX : 0x0DB,
	KEY_UDIAERESIS : 0x0DC,
	KEY_YACUTE : 0x0DD,
	KEY_THORN : 0x0DE,
	KEY_SSHARP : 0x0DF,
	KEY_DIVISION : 0x0F7,
	KEY_YDIAERESIS : 0x0FF,
	KEY_ALTGR : 0x01001103,
	KEY_MULTI_KEY : 0x01001120, // MULTI-KEY CHARACTER COMPOSE
	KEY_CODEINPUT : 0x01001137,
	KEY_SINGLECANDIDATE : 0x0100113C,
	KEY_MULTIPLECANDIDATE : 0x0100113D,
	KEY_PREVIOUSCANDIDATE : 0x0100113E,
	KEY_MODE_SWITCH : 0x0100117E, // CHARACTER SET SWITCH
	KEY_KANJI : 0x01001121, // KANJI, KANJI CONVERT
	KEY_MUHENKAN : 0x01001122, // CANCEL CONVERSION
	KEY_HENKAN : 0x01001123, // ALIAS FOR HENKAN_MODE
	KEY_ROMAJI : 0x01001124, // TO ROMAJI
	KEY_HIRAGANA : 0x01001125, // TO HIRAGANA
	KEY_KATAKANA : 0x01001126, // TO KATAKANA
	KEY_HIRAGANA_KATAKANA : 0x01001127, // HIRAGANA/KATAKANA TOGGLE
	KEY_ZENKAKU : 0x01001128, // TO ZENKAKU
	KEY_HANKAKU : 0x01001129, // TO HANKAKU
	KEY_ZENKAKU_HANKAKU : 0x0100112A, // ZENKAKU/HANKAKU TOGGLE
	KEY_TOUROKU : 0x0100112B, // ADD TO DICTIONARY
	KEY_MASSYO : 0x0100112C, // DELETE FROM DICTIONARY
	KEY_KANA_LOCK : 0x0100112D, // KANA LOCK
	KEY_KANA_SHIFT : 0x0100112E, // KANA SHIFT
	KEY_EISU_SHIFT : 0x0100112F, // ALPHANUMERIC SHIFT
	KEY_EISU_TOGGLE : 0x01001130, // ALPHANUMERIC TOGGLE
	KEY_HANGUL : 0x01001131, // HANGUL START/STOP(TOGGLE)
	KEY_HANGUL_START : 0x01001132, // HANGUL START
	KEY_HANGUL_END : 0x01001133, // HANGUL END, ENGLISH START
	KEY_HANGUL_HANJA : 0x01001134, // START HANGUL->HANJA CONVERSION
	KEY_HANGUL_JAMO : 0x01001135, // HANGUL JAMO MODE
	KEY_HANGUL_ROMAJA : 0x01001136, // HANGUL ROMAJA MODE
	KEY_HANGUL_JEONJA : 0x01001138, // JEONJA MODE
	KEY_HANGUL_BANJA : 0x01001139, // BANJA MODE
	KEY_HANGUL_PREHANJA : 0x0100113A, // PRE HANJA CONVERSION
	KEY_HANGUL_POSTHANJA : 0x0100113B, // POST HANJA CONVERSION
	KEY_HANGUL_SPECIAL : 0x0100113F, // SPECIAL SYMBOLS
	KEY_DEAD_GRAVE : 0x01001250,
	KEY_DEAD_ACUTE : 0x01001251,
	KEY_DEAD_CIRCUMFLEX : 0x01001252,
	KEY_DEAD_TILDE : 0x01001253,
	KEY_DEAD_MACRON : 0x01001254,
	KEY_DEAD_BREVE : 0x01001255,
	KEY_DEAD_ABOVEDOT : 0x01001256,
	KEY_DEAD_DIAERESIS : 0x01001257,
	KEY_DEAD_ABOVERING : 0x01001258,
	KEY_DEAD_DOUBLEACUTE : 0x01001259,
	KEY_DEAD_CARON : 0x0100125A,
	KEY_DEAD_CEDILLA : 0x0100125B,
	KEY_DEAD_OGONEK : 0x0100125C,
	KEY_DEAD_IOTA : 0x0100125D,
	KEY_DEAD_VOICED_SOUND : 0x0100125E,
	KEY_DEAD_SEMIVOICED_SOUND : 0x0100125F,
	KEY_DEAD_BELOWDOT : 0x01001260,
	KEY_DEAD_HOOK : 0x01001261,
	KEY_DEAD_HORN : 0x01001262,
	KEY_BACK : 0x01000061,
	KEY_FORWARD : 0x01000062,
	KEY_STOP : 0x01000063,
	KEY_REFRESH : 0x01000064,
	KEY_VOLUMEDOWN : 0x01000070,
	KEY_VOLUMEMUTE : 0x01000071,
	KEY_VOLUMEUP : 0x01000072,
	KEY_BASSBOOST : 0x01000073,
	KEY_BASSUP : 0x01000074,
	KEY_BASSDOWN : 0x01000075,
	KEY_TREBLEUP : 0x01000076,
	KEY_TREBLEDOWN : 0x01000077,
	KEY_MEDIAPLAY : 0x01000080,
	KEY_MEDIASTOP : 0x01000081,
	KEY_MEDIAPREVIOUS : 0x01000082,
	KEY_MEDIANEXT : 0x01000083,
	KEY_MEDIARECORD : 0x01000084,
	KEY_MEDIAPAUSE : 0x1000085,
	KEY_MEDIATOGGLEPLAYPAUSE : 0x1000086,
	KEY_HOMEPAGE : 0x01000090,
	KEY_FAVORITES : 0x01000091,
	KEY_SEARCH : 0x01000092,
	KEY_STANDBY : 0x01000093,
	KEY_OPENURL : 0x01000094,
	KEY_LAUNCHMAIL : 0x010000A0,
	KEY_LAUNCHMEDIA : 0x010000A1,
	KEY_LAUNCH0 : 0x010000A2,
	KEY_LAUNCH1 : 0x010000A3,
	KEY_LAUNCH2 : 0x010000A4,
	KEY_LAUNCH3 : 0x010000A5,
	KEY_LAUNCH4 : 0x010000A6,
	KEY_LAUNCH5 : 0x010000A7,
	KEY_LAUNCH6 : 0x010000A8,
	KEY_LAUNCH7 : 0x010000A9,
	KEY_LAUNCH8 : 0x010000AA,
	KEY_LAUNCH9 : 0x010000AB,
	KEY_LAUNCHA : 0x010000AC,
	KEY_LAUNCHB : 0x010000AD,
	KEY_LAUNCHC : 0x010000AE,
	KEY_LAUNCHD : 0x010000AF,
	KEY_LAUNCHE : 0x010000B0,
	KEY_LAUNCHF : 0x010000B1,
	KEY_MONBRIGHTNESSUP : 0x010000B2,
	KEY_MONBRIGHTNESSDOWN : 0x010000B3,
	KEY_KEYBOARDLIGHTONOFF : 0x010000B4,
	KEY_KEYBOARDBRIGHTNESSUP : 0x010000B5,
	KEY_KEYBOARDBRIGHTNESSDOWN : 0x010000B6,
	KEY_POWEROFF : 0x010000B7,
	KEY_WAKEUP : 0x010000B8,
	KEY_EJECT : 0x010000B9,
	KEY_SCREENSAVER : 0x010000BA,
	KEY_WWW : 0x010000BB,
	KEY_MEMO : 0x010000BC,
	KEY_LIGHTBULB : 0x010000BD,
	KEY_SHOP : 0x010000BE,
	KEY_HISTORY : 0x010000BF,
	KEY_ADDFAVORITE : 0x010000C0,
	KEY_HOTLINKS : 0x010000C1,
	KEY_BRIGHTNESSADJUST : 0x010000C2,
	KEY_FINANCE : 0x010000C3,
	KEY_COMMUNITY : 0x010000C4,
	KEY_AUDIOREWIND : 0x010000C5,
	KEY_BACKFORWARD : 0x010000C6,
	KEY_APPLICATIONLEFT : 0x010000C7,
	KEY_APPLICATIONRIGHT : 0x010000C8,
	KEY_BOOK : 0x010000C9,
	KEY_CD : 0x010000CA,
	KEY_CALCULATOR : 0x010000CB,
	KEY_TODOLIST : 0x010000CC,
	KEY_CLEARGRAB : 0x010000CD,
	KEY_CLOSE : 0x010000CE,
	KEY_COPY : 0x010000CF,
	KEY_CUT : 0x010000D0,
	KEY_DISPLAY : 0x010000D1,
	KEY_DOS : 0x010000D2,
	KEY_DOCUMENTS : 0x010000D3,
	KEY_EXCEL : 0x010000D4,
	KEY_EXPLORER : 0x010000D5,
	KEY_GAME : 0x010000D6,
	KEY_GO : 0x010000D7,
	KEY_ITOUCH : 0x010000D8,
	KEY_LOGOFF : 0x010000D9,
	KEY_MARKET : 0x010000DA,
	KEY_MEETING : 0x010000DB,
	KEY_MENUKB : 0x010000DC,
	KEY_MENUPB : 0x010000DD,
	KEY_MYSITES : 0x010000DE,
	KEY_NEWS : 0x010000DF,
	KEY_OFFICEHOME : 0x010000E0,
	KEY_OPTION : 0x010000E1,
	KEY_PASTE : 0x010000E2,
	KEY_PHONE : 0x010000E3,
	KEY_CALENDAR : 0x010000E4,
	KEY_REPLY : 0x010000E5,
	KEY_RELOAD : 0x010000E6,
	KEY_ROTATEWINDOWS : 0x010000E7,
	KEY_ROTATIONPB : 0x010000E8,
	KEY_ROTATIONKB : 0x010000E9,
	KEY_SAVE : 0x010000EA,
	KEY_SEND : 0x010000EB,
	KEY_SPELL : 0x010000EC,
	KEY_SPLITSCREEN : 0x010000ED,
	KEY_SUPPORT : 0x010000EE,
	KEY_TASKPANE : 0x010000EF,
	KEY_TERMINAL : 0x010000F0,
	KEY_TOOLS : 0x010000F1,
	KEY_TRAVEL : 0x010000F2,
	KEY_VIDEO : 0x010000F3,
	KEY_WORD : 0x010000F4,
	KEY_XFER : 0x010000F5,
	KEY_ZOOMIN : 0x010000F6,
	KEY_ZOOMOUT : 0x010000F7,
	KEY_AWAY : 0x010000F8,
	KEY_MESSENGER : 0x010000F9,
	KEY_WEBCAM : 0x010000FA,
	KEY_MAILFORWARD : 0x010000FB,
	KEY_PICTURES : 0x010000FC,
	KEY_MUSIC : 0x010000FD,
	KEY_BATTERY : 0x010000FE,
	KEY_BLUETOOTH : 0x010000FF,
	KEY_WLAN : 0x01000100,
	KEY_UWB : 0x01000101,
	KEY_AUDIOFORWARD : 0x01000102,
	KEY_AUDIOREPEAT : 0x01000103,
	KEY_AUDIORANDOMPLAY : 0x01000104,
	KEY_SUBTITLE : 0x01000105,
	KEY_AUDIOCYCLETRACK : 0x01000106,
	KEY_TIME : 0x01000107,
	KEY_HIBERNATE : 0x01000108,
	KEY_VIEW : 0x01000109,
	KEY_TOPMENU : 0x0100010A,
	KEY_POWERDOWN : 0x0100010B,
	KEY_SUSPEND : 0x0100010C,
	KEY_CONTRASTADJUST : 0x0100010D,
	KEY_LAUNCHG : 0x0100010E,
	KEY_LAUNCHH : 0x0100010F,
	KEY_MEDIALAST : 0x0100FFFF,
	KEY_CANCEL : 0x01020001,
	KEY_PRINTER : 0x01020002,
	KEY_EXECUTE : 0x01020003,
	KEY_SLEEP : 0x01020004,
	KEY_PLAY : 0x01020005, // NOT THE SAME AS KEY_MEDIAPLAY
	KEY_ZOOM : 0x01020006,
	KEY_CONTEXT1 : 0x01100000,
	KEY_CONTEXT2 : 0x01100001,
	KEY_CONTEXT3 : 0x01100002,
	KEY_CONTEXT4 : 0x01100003,
	KEY_CALL : 0x01100004, // SET ABSOLUTE STATE TO IN A CALL (DO NOT TOGGLE STATE)
	KEY_HANGUP : 0x01100005, // SET ABSOLUTE STATE TO HANG UP (DO NOT TOGGLE STATE)
	KEY_FLIP : 0x01100006,
	KEY_TOGGLECALLHANGUP : 0x01100007, // A TOGGLE KEY FOR ANSWERING, OR HANGING UP, BASED ON CURRENT CALL STATE
	KEY_VOICEDIAL : 0x01100008,
	KEY_LASTNUMBERREDIAL : 0x01100009,
	KEY_CAMERA : 0x01100020,
	KEY_CAMERAFOCUS : 0x01100021,
	KEY_UNKNOWN : 0x01FFFFFF
};
Object.freeze(c.KEY);

//Qt::KeyboardModifier
//Qt::LayoutDirection
//Qt::MaskMode
//Qt::MatchFlag
//Qt::Modifier

/**
	* Qt::MouseButton
	* @readonly
	* @enum {number}
	*/
c.MOUSEBUTTON = {
	NOBUTTON : 0x00000000,
	LEFTBUTTON : 0x00000001,
	RIGHTBUTTON : 0x00000002,
	MIDBUTTON : 0x00000004,
	MIDDLEBUTTON : 0x00000004,
	XBUTTON1 : 0x00000008,
	XBUTTON2 : 0x00000010,
	MOUSEBUTTONMASK : 0x000000ff
}
Object.freeze(c.MOUSEBUTTON);

//Qt::NavigationMode
//Qt::Orientation
//Qt::PenCapStyle
//Qt::PenJoinStyle
//Qt::PenStyle
//Qt::ScrollBarPolicy
// Qt::ScrollBarAsNeeded 0 QAbstractScrollArea shows a scroll bar when the content is too large to fit and not otherwise. This is the default.
// Qt::ScrollBarAlwaysOff 1 QAbstractScrollArea never shows a scroll bar.
// Qt::ScrollBarAlwaysOn 2 QAbstractScrollArea always shows a scroll bar.
//Qt::ShortcutContext
//Qt::SizeHint
//Qt::SizeMode
//Qt::SortOrder
//Qt::TextElideMode
//Qt::TextFlag

/**
	* Qt::TextFormat
	* @readonly
	* @enum {number}
	*/
c.TEXTFORMAT = {
	PLAINTEXT: 0, // The text string is interpreted as a plain text string.
	RICHTEXT: 1, // The text string is interpreted as a rich text string.
	AUTOTEXT: 2, // The text string is interpreted as for Qt::RichText if Qt::mightBeRichText() returns true, otherwise as Qt::PlainText.
	LOGTEXT: 3 // A special, limited text format which is only used by Q3TextEdit in an optimized mode.
}
Object.freeze(c.TEXTFORMAT);

//Qt::TextInteractionFlag
//Qt::TileRule
//Qt::TimeSpec

/**
	* Qt::ToolBarArea
	* @readonly
	* @enum {number}
	*/
c.TOOLBARAREA = {
	LEFTTOOLBARAREA: 0x1,
	RIGHTTOOLBARAREA: 0x2,
	TOPTOOLBARAREA: 0x4,
	BOTTOMTOOLBARAREA: 0x8,
	NOTOOLBARAREA: 0
}
Object.freeze(c.TOOLBARAREA);

/**
	* Qt::ToolButtonStyle
	* @readonly
	* @enum {number}
	*/
c.TOOLBUTTONSTYLE = {
	TOOLBUTTONICONONLY: 0, // Only display the icon.
	TOOLBUTTONTEXTONLY: 1, // Only display the text.
	TOOLBUTTONTEXTBESIDEICON: 2, // The text appears beside the icon.
	TOOLBUTTONTEXTUNDERICON: 3, // The text appears under the icon.
	TOOLBUTTONFOLLOWSTYLE: 4 // Follow the style.
}
Object.freeze(c.TOOLBUTTONSTYLE);

//Qt::TouchPointState
//Qt::TransformationMode
//Qt::UIEffect
//Qt::WhiteSpaceMode
// Qt::WhiteSpaceNormal 0 The whitespace mode used to display normal word wrapped text in paragraphs.
// Qt::WhiteSpacePre 1 A preformatted text mode in which whitespace is reproduced exactly.
// Qt::WhiteSpaceNoWrap 2
//Qt::WidgetAttribute
//Qt::WindowFrameSection

/**
	* Qt::WindowModality
	* @readonly
	* @enum {number}
	*/
c.WINDOWMODALITY = {
	NONMODAL: 0, // The window is not modal and does not block input to other windows.
	WINDOWMODAL: 1, // The window is modal to a single window hierarchy and blocks input to its parent window, all grandparent windows, and all siblings of its parent and grandparent windows.
	APPLICATIONMODAL: 2 // The window is modal to the application and blocks input to all windows.
}
Object.freeze(c.WINDOWMODALITY);

/**
	* Qt::WindowState
	* @readonly
	* @enum {number}
	*/
c.WINDOWSTATE = {
	WINDOWNOSTATE: 0x00000000, // The window has no state set (in normal state).
	WINDOWMINIMIZED: 0x00000001, // The window is minimized (i.e. iconified).
	WINDOWMAXIMIZED: 0x00000002, // The window is maximized with a frame around it.
	WINDOWFULLSCREEN: 0x00000004, // The window fills the entire screen without any frame around it.
	WINDOWACTIVE: 0x00000008 // The window is the active window, i.e. it has keyboard focus.
}
Object.freeze(c.WINDOWSTATE);

/**
	* Qt::WindowType
	* @readonly
	* @enum {number}
	*/
c.WINDOWTYPE = {
	WIDGET: 0x00000000, // This is the default type for QWidget. Widgets of this type are child widgets if they have a parent, and independent windows if they have no parent. See also Qt::Window and Qt::SubWindow.
	WINDOW: 0x00000001, // Indicates that the widget is a window, usually with a window system frame and a title bar, irrespective of whether the widget has a parent or not. Note that it is not possible to unset this flag if the widget does not have a parent.
	DIALOG: 0x00000002 | 0x00000001, // Indicates that the widget is a window that should be decorated as a dialog (i.e., typically no maximize or minimize buttons in the title bar). This is the default type for QDialog. If you want to use it as a modal dialog, it should be launched from another window, or have a parent and used with the QWidget::windowModality property. If you make it modal, the dialog will prevent other top-level windows in the application from getting any input. We refer to a top-level window that has a parent as a secondary window.
	SHEET: 0x00000004 | 0x00000001, // Indicates that the window is a Macintosh sheet. Since using a sheet implies window modality, the recommended way is to use QWidget::setWindowModality(), or QDialog::open(), instead.
	DRAWER: 0x00000006 | 0x00000001, // Indicates that the widget is a Macintosh drawer.
	POPUP: 0x00000008 | 0x00000001, // Indicates that the widget is a pop-up top-level window, i.e. that it is modal, but has a window system frame appropriate for pop-up menus.
	TOOL: 0x0000000a | 0x00000001, // Indicates that the widget is a tool window. A tool window is often a small window with a smaller than usual title bar and decoration, typically used for collections of tool buttons. If there is a parent, the tool window will always be kept on top of it. If there isn't a parent, you may consider using Qt::WindowStaysOnTopHint as well. If the window system supports it, a tool window can be decorated with a somewhat lighter frame. It can also be combined with Qt::FramelessWindowHint.
	TOOLTIP: 0x0000000c | 0x00000001, // Indicates that the widget is a tooltip. This is used internally to implement tooltips.
	SPLASHSCREEN: 0x0000000e | 0x00000001, // Indicates that the window is a splash screen. This is the default type for QSplashScreen.
	DESKTOP: 0x00000010 | 0x00000001, // Indicates that this widget is the desktop. This is the type for QDesktopWidget.
	SUBWINDOW: 0x00000012, // Indicates that this widget is a sub-window, such as a QMdiSubWindow widget.
	MSWINDOWSFIXEDSIZEDIALOGHINT: 0x00000100, // Gives the window a thin dialog border on Windows. This style is traditionally used for fixed-size dialogs.
	MSWINDOWSOWNDC: 0x00000200, // Gives the window its own display context on Windows.
	X11BYPASSWINDOWMANAGERHINT: 0x00000400, // Bypass the window manager completely. This results in a borderless window that is not managed at all (i.e., no keyboard input unless you call QWidget::activateWindow() manually).
	FRAMELESSWINDOWHINT: 0x00000800, // Produces a borderless window. The user cannot move or resize a borderless window via the window system. On X11, the result of the flag is dependent on the window manager and its ability to understand Motif and/or NETWM hints. Most existing modern window managers can handle this.
	CUSTOMIZEWINDOWHINT: 0x02000000, // Turns off the default window title hints.
	WINDOWTITLEHINT: 0x00001000, // Gives the window a title bar.
	WINDOWSYSTEMMENUHINT: 0x00002000, // Adds a window system menu, and possibly a close button (for example on Mac). If you need to hide or show a close button, it is more portable to use WindowCloseButtonHint.
	WINDOWMINIMIZEBUTTONHINT: 0x00004000, // Adds a minimize button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.
	WINDOWMAXIMIZEBUTTONHINT: 0x00008000, // Adds a maximize button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.
	WINDOWMINMAXBUTTONSHINT: 0x00004000 | 0x00008000, // Adds a minimize and a maximize button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.
	WINDOWCLOSEBUTTONHINT: 0x08000000, // Adds a close button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.
	WINDOWCONTEXTHELPBUTTONHINT: 0x00010000, // Adds a context help button to dialogs. On some platforms this implies Qt::WindowSystemMenuHint for it to work.
	MACWINDOWTOOLBARBUTTONHINT: 0x10000000, // On Mac OS X adds a tool bar button (i.e., the oblong button that is on the top right of windows that have toolbars).
	BYPASSGRAPHICSPROXYWIDGET: 0x20000000, // Prevents the window and its children from automatically embedding themselves into a QGraphicsProxyWidget if the parent widget is already embedded. You can set this flag if you want your widget to always be a toplevel widget on the desktop, regardless of whether the parent widget is embedded in a scene or not.
	WINDOWSHADEBUTTONHINT: 0x00020000, // 
	WINDOWSTAYSONTOPHINT: 0x00040000, // Informs the window system that the window should stay on top of all other windows. Note that on some window managers on X11 you also have to pass Qt::X11BypassWindowManagerHint for this flag to work correctly.
	WINDOWSTAYSONBOTTOMHINT: 0x04000000, // Informs the window system that the window should stay on bottom of all other windows. Note that on X11 this hint will work only in window managers that support _NET_WM_STATE_BELOW atom. If a window always on the bottom has a parent, the parent will also be left on the bottom. This window hint is currently not implemented for Mac OS X.
	WINDOWOKBUTTONHINT: 0x00080000, // Adds an OK button to the window decoration of a dialog. Only supported for Windows CE.
	WINDOWCANCELBUTTONHINT: 0x00100000, // Adds a Cancel button to the window decoration of a dialog. Only supported for Windows CE.
	WINDOWSOFTKEYSVISIBLEHINT: 0x40000000, // Makes softkeys visible when widget is fullscreen. Only supported for Symbian.
	WINDOWSOFTKEYSRESPONDHINT: 0x80000000, // Makes softkeys to receive key events even when invisible. With this hint the softkey actions are triggered even the softkeys are invisible i.e. the window is displayed with showFullscreen(). Only supported for Symbian.
	WINDOWTYPE_MASK: 0x000000ff // A mask for extracting the window type part of the window flags.
}
Object.freeze(c.WINDOWTYPE);

/**
	* QDialogButtonBox::StandardButton
	* @readonly
	* @enum {number}
	*/
c.STANDARDBUTTON = { // c.QDialogButtonBox.StandardButton
	OK: 0x00000400, // An "OK" button defined with the AcceptRole.
	OPEN: 0x00002000, // A "Open" button defined with the AcceptRole.
	SAVE: 0x00000800, // A "Save" button defined with the AcceptRole.
	CANCEL: 0x00400000, // A "Cancel" button defined with the RejectRole.
	CLOSE: 0x00200000, // A "Close" button defined with the RejectRole.
	DISCARD: 0x00800000, // A "Discard" or "Don't Save" button, depending on the platform, defined with the DestructiveRole.
	APPLY: 0x02000000, // An "Apply" button defined with the ApplyRole.
	RESET: 0x04000000, // A "Reset" button defined with the ResetRole.
	RESTOREDEFAULTS: 0x08000000, // A "Restore Defaults" button defined with the ResetRole.
	HELP: 0x01000000, // A "Help" button defined with the HelpRole.
	SAVEALL: 0x00001000, // A "Save All" button defined with the AcceptRole.
	YES: 0x00004000, // A "Yes" button defined with the YesRole.
	YESTOALL: 0x00008000, // A "Yes to All" button defined with the YesRole.
	NO: 0x00010000, // A "No" button defined with the NoRole.
	NOTOALL: 0x00020000, // A "No to All" button defined with the NoRole.
	ABORT: 0x00040000, // An "Abort" button defined with the RejectRole.
	RETRY: 0x00080000, // A "Retry" button defined with the AcceptRole.
	IGNORE: 0x00100000, // An "Ignore" button defined with the AcceptRole.
	NOBUTTON: 0x00000000 // An invalid button.
};
Object.freeze(c.STANDARDBUTTON);

/**
	* QMessageBox::ButtonRole
	* @readonly
	* @enum {number}
	*/
c.BUTTONROLE = { // c.QDialogButtonBox.StandardButton
	INVALIDROLE: -1, // The button is invalid.
	ACCEPTROLE: 0, // Clicking the button causes the dialog to be accepted (e.g. OK).
	REJECTROLE: 1, // Clicking the button causes the dialog to be rejected (e.g. Cancel).
	DESTRUCTIVEROLE: 2, // Clicking the button causes a destructive change (e.g. for Discarding Changes) and closes the dialog.
	ACTIONROLE: 3, // Clicking the button causes changes to the elements within the dialog.
	HELPROLE: 4, // The button can be clicked to request help.
	YESROLE: 5, // The button is a "Yes"-like button.
	NOROLE: 6, // The button is a "No"-like button.
	APPLYROLE: 8, // The button applies current changes.
	RESETROLE: 7 // The button resets the dialog's fields to default values.
};
Object.freeze(c.BUTTONROLE);

/**
	* QPalette::ColorRole
	* @readonly
	* @enum {number}
	*/
c.COLORROLE = { // c.QPalette.ColorRole
	WINDOW: 10, // A general background color.
	WINDOWTEXT: 0, // A general foreground color.
	BASE: 9, // Used mostly as the background color for text entry widgets, but can also be used for other painting - such as the background of combobox drop down lists and toolbar handles. It is usually white or another light color.
	ALTERNATEBASE: 16, // Used as the alternate background color in views with alternating row colors (see QAbstractItemView::setAlternatingRowColors()).
	TOOLTIPBASE: 18, // Used as the background color for QToolTip and QWhatsThis. Tool tips use the Inactive color group of QPalette, because tool tips are not active windows.
	TOOLTIPTEXT: 19, // Used as the foreground color for QToolTip and QWhatsThis. Tool tips use the Inactive color group of QPalette, because tool tips are not active windows.
	TEXT: 6, // The foreground color used with Base. This is usually the same as the WindowText, in which case it must provide good contrast with Window and Base.
	BUTTON: 1, //The general button background color. This background can be different from Window as some styles require a different background color for buttons.
	BUTTONTEXT: 8, // A foreground color used with the Button color.
	BRIGHTTEXT: 7 // A text color that is very different from WindowText, and contrasts well with e.g. Dark. Typically used for text that needs to be drawn where Text or WindowText would give poor contrast, such as on pressed push buttons. Note that text colors can be used for things other than just words; text colors are usually used for text, but it's quite common to use the text color roles for lines, icons, etc.
};
Object.freeze(c.COLORROLE);

/**
	* QPalette::ContextMenuPolicy
	* This enum type defines the various policies a widget can have with respect to showing a
	* context menu.
	*
	* @readonly
	* @enum {number}
	*/
c.CONTEXTMENUPOLICY = {
	NOCONTEXTMENU: 0, // the widget does not feature a context menu, context menu handling is deferred to the widget's parent.
	PREVENTCONTEXTMENU: 4, // the widget does not feature a context menu, and in contrast to NoContextMenu, the handling is not deferred to the widget's parent. This means that all right mouse button events are guaranteed to be delivered to the widget itself through mousePressEvent(), and mouseReleaseEvent().
	DEFAULTCONTEXTMENU: 1, // the widget's QWidget::contextMenuEvent() handler is called.
	ACTIONSCONTEXTMENU: 2, // the widget displays its QWidget::actions() as context menu.
	CUSTOMCONTEXTMENU: 3 // the widget emits the QWidget::customContextMenuRequested() signal.
};
Object.freeze(c.CONTEXTMENUPOLICY);

c.QDIR = {
	DIRS: 0x001, // List directories that match the filters.
	ALLDIRS: 0x400, // List all directories; i.e. don't apply the filters to directory names.
	FILES: 0x002, // List files.
	DRIVES: 0x004, // List disk drives (ignored under Unix).
	NOSYMLINKS: 0x008, // Do not list symbolic links (ignored by operating systems that don't support symbolic links).
	NODOTANDDOTDOT: 0x1000, // Do not list the special entries "." and "..".
	NODOT: 0x2000, // Do not list the special entry ".".
	NODOTDOT: 0x4000, // Do not list the special entry "..".
	//AllEntries Dirs | Files | Drives List directories, files, drives and symlinks (this does not list broken symlinks unless you specify System).
	READABLE: 0x010, // List files for which the application has read access. The Readable value needs to be combined with Dirs or Files.
	WRITABLE: 0x020, // List files for which the application has write access. The Writable value needs to be combined with Dirs or Files.
	EXECUTABLE: 0x040, // List files for which the application has execute access. The Executable value needs to be combined with Dirs or Files.
	MODIFIED: 0x080, // Only list files that have been modified (ignored on Unix).
	HIDDEN: 0x100, // List hidden files (on Unix, files starting with a ".").
	SYSTEM: 0x200, // List system files (on Unix, FIFOs, sockets and device files are included; on Windows, .lnk files are included)
	CASESENSITIVE: 0x800 // The filter should be case sensitive.
};
Object.freeze(c.QDIR);

// enum QLineEdit::EchoMode
c.ECHOMODE = {
	NORMAL: 0, // Display characters as they are entered. This is the default.
	NOECHO: 1, // Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
	PASSWORD: 2, // Display asterisks instead of the characters actually entered.
	PASSWORDECHOONEDIT: 3 // Display characters as they are entered while editing otherwise display asterisks.
};
Object.freeze(c.ECHOMODE);

// enum QTabWidget::TabPosition
c.TABPOSITION = {
	NORTH: 0, // The tabs are drawn above the pages.
	SOUTH: 1, // The tabs are drawn below the pages.
	WEST: 2, // The tabs are drawn to the left of the pages.
	EAST: 3 // The tabs are drawn to the right of the pages.
};
Object.freeze(c.TABPOSITION);

/**
	* QKeySequence::StandardKey
	* @readonly
	* @enum {number}
	*/
c.KEYSEQUENCE = {
	ADDTAB: 19, // Add new tab.
	BACK: 13, // Navigate back.
	BOLD: 27, // Bold text.
	CLOSE: 4, // Close document/tab.
	COPY: 9, // Copy.
	CUT: 8, // Cut.
	DELETE: 7, // Delete.
	DELETEENDOFLINE: 60, // Delete end of line.
	DELETEENDOFWORD: 59, // Delete word from the end of the cursor.
	DELETESTARTOFWORD: 58, // Delete the beginning of a word up to the cursor.
	FIND: 22, // Find in document.
	FINDNEXT: 23, // Find next result.
	FINDPREVIOUS: 24, // Find previous result.
	FORWARD:14, // Navigate forward.
	HELPCONTENTS: 1, // Open help contents.
	INSERTLINESEPARATOR: 62, // Insert a new line.
	INSERTPARAGRAPHSEPARATOR: 61, // Insert a new paragraph.
	ITALIC: 28, // Italic text.
	MOVETOENDOFBLOCK: 41, // Move cursor to end of block. This shortcut is only used on the OS X.
	MOVETOENDOFDOCUMENT: 43, // Move cursor to end of document.
	MOVETOENDOFLINE: 39, // Move cursor to end of line.
	MOVETONEXTCHAR: 30, // Move cursor to next character.
	MOVETONEXTLINE: 34, // Move cursor to next line.
	MOVETONEXTPAGE: 36, // Move cursor to next page.
	MOVETONEXTWORD: 32, // Move cursor to next word.
	MOVETOPREVIOUSCHAR: 31, // Move cursor to previous character.
	MOVETOPREVIOUSLINE: 35, // Move cursor to previous line.
	MOVETOPREVIOUSPAGE: 37, // Move cursor to previous page.
	MOVETOPREVIOUSWORD: 33, // Move cursor to previous word.
	MOVETOSTARTOFBLOCK: 40, // Move cursor to start of a block. This shortcut is only used on OS X.
	MOVETOSTARTOFDOCUMENT: 42, // Move cursor to start of document.
	MOVETOSTARTOFLINE: 38, // Move cursor to start of line.
	New: 6, // Create new document.
	NEXTCHILD: 20, // Navigate to next tab or child window.
	OPEN: 3, // Open document.
	PASTE: 10, // Paste.
	PREFERENCES: 64, // Open the preferences dialog.
	PREVIOUSCHILD: 21, // Navigate to previous tab or child window.
	PRINT: 18, // Print document.
	QUIT: 65, // Quit the application.
	REDO: 12, // Redo.
	REFRESH: 15, // Refresh or reload current document.
	REPLACE: 25, // Find and replace.
	SAVEAS: 63, // Save document after prompting the user for a file name.
	SAVE: 5, // Save document.
	SELECTALL: 26, // Select all text.
	SELECTENDOFBLOCK: 55, // Extend selection to the end of a text block. This shortcut is only used on OS X.
	SELECTENDOFDOCUMENT: 57, // Extend selection to end of document.
	SELECTENDOFLINE: 53, // Extend selection to end of line.
	SELECTNEXTCHAR:44, // Extend selection to next character.
	SELECTNEXTLINE:48, // Extend selection to next line.
	SELECTNEXTPAGE:50, // Extend selection to next page.
	SELECTNEXTWORD:46, // Extend selection to next word.
	SELECTPREVIOUSCHAR: 45, // Extend selection to previous character.
	SELECTPREVIOUSLINE: 49, // Extend selection to previous line.
	SELECTPREVIOUSPAGE: 51, // Extend selection to previous page.
	SELECTPREVIOUSWORD: 47, // Extend selection to previous word.
	SELECTSTARTOFBLOCK: 54, // Extend selection to the start of a text block. This shortcut is only used on OS X.
	SELECTSTARTOFDOCUMENT: 56, // Extend selection to start of document.
	SELECTSTARTOFLINE: 52, // Extend selection to start of line.
	UNDERLINE: 29, // Underline text.
	UNDO: 11, // Undo.
	UNKNOWNKEY: 0, // Unbound key.
	WHATSTHIS: 2, // Activate whats this.
	ZOOMIN: 16, // Zoom in.
	ZOOMOUT: 17 // Zoom out.
}
Object.freeze(c.KEYSEQUENCE);

// QEvent::Type
c.EVENTTYPE = {
	NONE: 0, // Not an event.
	ACCESSIBILITYDESCRIPTION: 130, // Used to query accessibility description texts (QAccessibleEvent).
	ACCESSIBILITYHELP: 119, // Used to query accessibility help texts (QAccessibleEvent).
	ACCESSIBILITYPREPARE: 86, // Accessibility information is requested.
	ACTIONADDED: 114, // A new action has been added (QActionEvent).
	ACTIONCHANGED: 113, // An action has been changed (QActionEvent).
	ACTIONREMOVED: 115, // An action has been removed (QActionEvent).
	ACTIVATIONCHANGE: 99, // A widget's top-level window activation state has changed.
	APPLICATIONACTIVATE: 121, // The application has been made available to the user.
	APPLICATIONDEACTIVATE: 122, // The application has been suspended, and is unavailable to the user.
	APPLICATIONFONTCHANGE: 36, // The default application font has changed.
	APPLICATIONLAYOUTDIRECTIONCHANGE: 37, // The default application layout direction has changed.
	APPLICATIONPALETTECHANGE: 38, // The default application palette has changed.
	APPLICATIONWINDOWICONCHANGE: 35, // The application's icon has changed.
	CHILDADDED: 68, // An object gets a child (QChildEvent).
	CHILDINSERTED: 70, // An object gets a child (QChildEvent). Qt3Support only, use ChildAdded instead.
	CHILDPOLISHED: 69, // A widget child gets polished (QChildEvent).
	CHILDREMOVED: 71, // An object loses a child (QChildEvent).
	CLIPBOARD: 40, // The clipboard contents have changed (QClipboardEvent).
	CLOSE: 19, // Widget was closed (QCloseEvent).
	CLOSESOFTWAREINPUTPANEL: 200, // A widget wants to close the software input panel (SIP).
	CONTENTSRECTCHANGE: 178, // The margins of the widget's content rect changed.
	CONTEXTMENU: 82, // Context popup menu (QContextMenuEvent).
	CURSORCHANGE: 183, // The widget's cursor has changed.
	DEFERREDDELETE: 52, // The object will be deleted after it has cleaned up.
	DRAGENTER: 60, // The cursor enters a widget during a drag and drop operation (QDragEnterEvent).
	DRAGLEAVE: 62, // The cursor leaves a widget during a drag and drop operation (QDragLeaveEvent).
	DRAGMOVE: 61, // A drag and drop operation is in progress (QDragMoveEvent).
	DROP: 63, // A drag and drop operation is completed (QDropEvent).
	ENABLEDCHANGE: 98, // Widget's enabled state has changed.
	ENTER: 10, // Mouse enters widget's boundaries.
	ENTEREDITFOCUS: 150, // An editor widget gains focus for editing.
	ENTERWHATSTHISMODE: 124, // Send to toplevel widgets when the application enters "What's This?" mode.
	FILEOPEN: 116, // File open request (QFileOpenEvent).
	FOCUSIN: 8, // Widget gains keyboard focus (QFocusEvent).
	FOCUSOUT: 9, // Widget loses keyboard focus (QFocusEvent).
	FONTCHANGE: 97, // Widget's font has changed.
	GRABKEYBOARD: 188, // Item gains keyboard grab (QGraphicsItem only).
	GRABMOUSE: 186, // Item gains mouse grab (QGraphicsItem only).
	GRAPHICSSCENECONTEXTMENU: 159, // Context popup menu over a graphics scene (QGraphicsSceneContextMenuEvent).
	GRAPHICSSCENEDRAGENTER: 164, // The cursor enters a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
	GRAPHICSSCENEDRAGLEAVE: 166, // The cursor leaves a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
	GRAPHICSSCENEDRAGMOVE: 165, // A drag and drop operation is in progress over a scene (QGraphicsSceneDragDropEvent).
	GRAPHICSSCENEDROP: 167, // A drag and drop operation is completed over a scene (QGraphicsSceneDragDropEvent).
	GRAPHICSSCENEHELP: 163, // The user requests help for a graphics scene (QHelpEvent).
	GRAPHICSSCENEHOVERENTER: 160, // The mouse cursor enters a hover item in a graphics scene (QGraphicsSceneHoverEvent).
	GRAPHICSSCENEHOVERLEAVE: 162, // The mouse cursor leaves a hover item in a graphics scene (QGraphicsSceneHoverEvent).
	GRAPHICSSCENEHOVERMOVE: 161, // The mouse cursor moves inside a hover item in a graphics scene (QGraphicsSceneHoverEvent).
	GRAPHICSSCENEMOUSEDOUBLECLICK: 158, // Mouse press again (double click) in a graphics scene (QGraphicsSceneMouseEvent).
	GRAPHICSSCENEMOUSEMOVE: 155, // Move mouse in a graphics scene (QGraphicsSceneMouseEvent).
	GRAPHICSSCENEMOUSEPRESS: 156, // Mouse press in a graphics scene (QGraphicsSceneMouseEvent).
	GRAPHICSSCENEMOUSERELEASE: 157, // Mouse release in a graphics scene (QGraphicsSceneMouseEvent).
	GRAPHICSSCENEMOVE: 182, // Widget was moved (QGraphicsSceneMoveEvent).
	GRAPHICSSCENERESIZE: 181, // Widget was resized (QGraphicsSceneResizeEvent).
	GRAPHICSSCENEWHEEL: 168, // Mouse wheel rolled in a graphics scene (QGraphicsSceneWheelEvent).
	HIDE: 18, // Widget was hidden (QHideEvent).
	HIDETOPARENT: 27, // A child widget has been hidden.
	HOVERENTER: 127, // The mouse cursor enters a hover widget (QHoverEvent).
	HOVERLEAVE: 128, // The mouse cursor leaves a hover widget (QHoverEvent).
	HOVERMOVE: 129, // The mouse cursor moves inside a hover widget (QHoverEvent).
	ICONDRAG: 96, // The main icon of a window has been dragged away (QIconDragEvent).
	ICONTEXTCHANGE: 101, // Widget's icon text has been changed.
	INPUTMETHOD: 83, // An input method is being used (QInputMethodEvent).
	KEYPRESS: 6, // Key press (QKeyEvent).
	KEYRELEASE: 7, // Key release (QKeyEvent).
	LANGUAGECHANGE: 89, // The application translation changed.
	LAYOUTDIRECTIONCHANGE: 90, // The direction of layouts changed.
	LAYOUTREQUEST: 76, // Widget layout needs to be redone.
	LEAVE: 11, // Mouse leaves widget's boundaries.
	LEAVEEDITFOCUS: 151, // An editor widget loses focus for editing.
	LEAVEWHATSTHISMODE: 125, // Send to toplevel widgets when the application leaves "What's This?" mode.
	LOCALECHANGE: 88, // The system locale has changed.
	NONCLIENTAREAMOUSEBUTTONDBLCLICK: 176, // A mouse double click occurred outside the client area.
	NONCLIENTAREAMOUSEBUTTONPRESS: 174, // A mouse button press occurred outside the client area.
	NONCLIENTAREAMOUSEBUTTONRELEASE: 175, // A mouse button release occurred outside the client area.
	NONCLIENTAREAMOUSEMOVE: 173, // A mouse move occurred outside the client area.
	MACSIZECHANGE: 177, // The user changed his widget sizes (Mac OS X only).
	MENUBARUPDATED: 153, // The window's menu bar has been updated.
	METACALL: 43, // An asynchronous method invocation via QMetaObject::invokeMethod().
	MODIFIEDCHANGE: 102, // Widgets modification state has been changed.
	MOUSEBUTTONDBLCLICK: 4, // Mouse press again (QMouseEvent).
	MOUSEBUTTONPRESS: 2, // Mouse press (QMouseEvent).
	MOUSEBUTTONRELEASE: 3, // Mouse release (QMouseEvent).
	MOUSEMOVE: 5, // Mouse move (QMouseEvent).
	MOUSETRACKINGCHANGE: 109, // The mouse tracking state has changed.
	MOVE: 13, // Widget's position changed (QMoveEvent).
	PAINT: 12, // Screen update necessary (QPaintEvent).
	PALETTECHANGE: 39, // Palette of the widget changed.
	PARENTABOUTTOCHANGE: 131, // The widget parent is about to change.
	PARENTCHANGE: 21, // The widget parent has changed.
	PLATFORMPANEL: 212, // A platform specific panel has been requested.
	POLISH: 75, // The widget is polished.
	POLISHREQUEST: 74, // The widget should be polished.
	QUERYWHATSTHIS: 123, // The widget should accept the event if it has "What's This?" help.
	REQUESTSOFTWAREINPUTPANEL: 199, // A widget wants to open a software input panel (SIP).
	RESIZE: 14, // Widget's size changed (QResizeEvent).
	SHORTCUT: 117, // Key press in child for shortcut key handling (QShortcutEvent).
	SHORTCUTOVERRIDE: 51, // Key press in child, for overriding shortcut key handling (QKeyEvent).
	SHOW: 17, // Widget was shown on screen (QShowEvent).
	SHOWTOPARENT: 26, // A child widget has been shown.
	SOCKACT: 50, // Socket activated, used to implement QSocketNotifier.
	STATEMACHINESIGNAL: 192, // A signal delivered to a state machine (QStateMachine::SignalEvent).
	STATEMACHINEWRAPPED: 193, // The event is a wrapper for, i.e., contains, another event (QStateMachine::WrappedEvent).
	STATUSTIP: 112, // A status tip is requested (QStatusTipEvent).
	STYLECHANGE: 100, // Widget's style has been changed.
	TABLETMOVE: 87, // Wacom tablet move (QTabletEvent).
	TABLETPRESS: 92, // Wacom tablet press (QTabletEvent).
	TABLETRELEASE: 93, // Wacom tablet release (QTabletEvent).
	OKREQUEST: 94, // Ok button in decoration pressed. Supported only for Windows CE.
	TABLETENTERPROXIMITY: 171, // Wacom tablet enter proximity event (QTabletEvent), sent to QApplication.
	TABLETLEAVEPROXIMITY: 172, // Wacom tablet leave proximity event (QTabletEvent), sent to QApplication.
	TIMER: 1, // Regular timer events (QTimerEvent).
	TOOLBARCHANGE: 120, // The toolbar button is toggled on Mac OS X.
	TOOLTIP: 110, // A tooltip was requested (QHelpEvent).
	TOOLTIPCHANGE: 184, // The widget's tooltip has changed.
	UNGRABKEYBOARD: 189, // Item loses keyboard grab (QGraphicsItem only).
	UNGRABMOUSE: 187, // Item loses mouse grab (QGraphicsItem only).
	UPDATELATER: 78, // The widget should be queued to be repainted at a later time.
	UPDATEREQUEST: 77, // The widget should be repainted.
	WHATSTHIS: 111, // The widget should reveal "What's This?" help (QHelpEvent).
	WHATSTHISCLICKED: 118, // A link in a widget's "What's This?" help was clicked.
	WHEEL: 31, // Mouse wheel rolled (QWheelEvent).
	WINEVENTACT: 132, // A Windows-specific activation event has occurred.
	WINDOWACTIVATE: 24, // Window was activated.
	WINDOWBLOCKED: 103, // The window is blocked by a modal dialog.
	WINDOWDEACTIVATE: 25, // Window was deactivated.
	WINDOWICONCHANGE: 34, // The window's icon has changed.
	WINDOWSTATECHANGE: 105, // The window's state (minimized, maximized or full-screen) has changed (QWindowStateChangeEvent).
	WINDOWTITLECHANGE: 33, // The window title has changed.
	WINDOWUNBLOCKED: 104, // The window is unblocked after a modal dialog exited.
	ZORDERCHANGE: 126, // The widget's z-order has changed. This event is never sent to top level windows.
	KEYBOARDLAYOUTCHANGE: 169, // The keyboard layout has changed.
	DYNAMICPROPERTYCHANGE: 170, // A dynamic property was added, changed or removed from the object.
	TOUCHBEGIN: 194, // Beginning of a sequence of touch-screen and/or track-pad events (QTouchEvent)
	TOUCHUPDATE: 195, // Touch-screen event (QTouchEvent)
	TOUCHEND: 196, // End of touch-event sequence (QTouchEvent)
	WINIDCHANGE: 203, // The window system identifer for this native widget has changed
	GESTURE: 198, // A gesture was triggered (QGestureEvent)
	GESTUREOVERRIDE: 202 // A gesture override was triggered (QGestureEvent)
}
Object.freeze(c.EVENTTYPE);

/**
	* enum QAbstractItemView::DragDropMode
	* @readonly
	* @enum {number}
	*/
c.DRAGDROPMODE = {
	NODRAGDROP: 0, // Does not support dragging or dropping.
	DRAGONLY: 1, // The view supports dragging of its own items
	DROPONLY: 2, // The view accepts drops
	DRAGDROP: 3, // The view supports both dragging and dropping
	INTERNALMOVE: 4 // The view accepts move (not copy) operations only from itself.
}
Object.freeze(c.DRAGDROPMODE);

/**
	* enum QAbstractItemView::SelectionMode
	* @readonly
	* @enum {number}
	*/
c.SELECTIONMODE = {
	SINGLESELECTION: 1, // When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item by clicking on it.
	CONTIGUOUSSELECTION: 4, // When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.
	EXTENDEDSELECTION: 3, // When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.
	MULTISELECTION: 2, // When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.
	NOSELECTION: 0 // Items cannot be selected.
}
Object.freeze(c.SELECTIONMODE);

/**
	* enum QAbstractItemView::SelectionBehavior
	* @readonly
	* @enum {number}
	*/
c.SELECTIONBEHAVIOR = {
	SELECTITEMS: 0, // Selecting single items.
	SELECTROWS: 1, // Selecting only rows.
	SELECTCOLUMNS: 2 // Selecting only columns.
}
Object.freeze(c.SELECTIONBEHAVIOR);

/**
	* enum QItemSelectionModel::SelectionFlag
	* @readonly
	* @enum {number}
	*/
c.SELECTIONFLAG = {
	NOUPDATE: 0x0000, // No selection will be made.
	CLEAR: 0x0001, // The complete selection will be cleared.
	SELECT: 0x0002, // All specified indexes will be selected.
	DESELECT: 0x0004, // All specified indexes will be deselected.
	TOGGLE: 0x0008, // All specified indexes will be selected or deselected depending on their current state.
	CURRENT: 0x0010, // The current selection will be updated.
	ROWS: 0x0020, // All indexes will be expanded to span rows.
	COLUMNS: 0x0040 // All indexes will be expanded to span columns.
}
Object.freeze(c.SELECTIONFLAG);

/**
	* enum Qt::ItemDataRole
	* @readonly
	* @enum {number}
	*/
c.ITEMDATAROLE = {
	DISPLAYROLE: 0, // The key data to be rendered in the form of text. (QString)
	DECORATIONROLE: 1, // The data to be rendered as a decoration in the form of an icon. (QColor, QIcon or QPixmap)
	EDITROLE: 2, // The data in a form suitable for editing in an editor. (QString)
	TOOLTIPROLE: 3, // The data displayed in the item's tooltip. (QString)
	STATUSTIPROLE: 4, // The data displayed in the status bar. (QString)
	WHATSTHISROLE: 5, // The data displayed for the item in "What's This?" mode. (QString)
	SIZEHINTROLE: 13, // The size hint for the item that will be supplied to views. (QSize)
	USERROLE: 32 //The first role that can be used for application-specific purposes.
}
Object.freeze(c.ITEMDATAROLE);

}
